Notation:
- "a: b": field of name "a" with value b
- "a": field of name "a" with value a
- field: field snowflake if model, otherwise the data
- {Model}: inline of all non-PK fields of the model
- [thing]: array of thing
- Model: related snowflake

Notes:
- default pagination is 10 long; as applicable, get the next with ?page= (NOT IMPLEMENTED YET)
- PATCH inputs are all optional

- every request requires the following header:
	Accept: application/json
- every mutation request requires the following header:
	X-CSRFToken: <csrf_token>
- every non-DELETE mutation request requires the following header:
	Content-Type: application/json
- every request that requires auth requires the following header:
	Authorization: Bearer <access_token>

==================================================================

GET `csrf_token/`
	{ csrf_token: csrf_token }
	no auth needed
	added

GET `who_am_i/`
	{ logged_in: boolean, snowflake_id: InnavatorUser if logged_in else 0 }
	output dependent on auth presence or absence
	added

---------------

GET `users/`
	{ count: int, previous: null or URL, next: null or URL, results: [{InnavatorUser}] }
	no auth needed
	added

GET `users/<InnavatorUser>/`
	{ {InnavatorUser where pk=pk} }
	no auth needed
	added

GET `users/<InnavatorUser>/get_palette/`
	{ {Palette} where user=pk }
	no auth needed
	added

GET `users/<InnavatorUser>/portfolio/`
	{ count: int, previous: null or URL, next: null or URL, results: [{PortfolioEntry} where user=pk] }
	no auth needed
	added

GET `users/<InnavatorUser>/mentors/`
	{ count: int, previous: null or URL, next: null or URL, results: [{Mentorship} where mentee=pk and mentor_accepted=true and mentee_accepted=true] }
	auth needed - same user
	added

GET `users/<InnavatorUser>/mentees/`
	{ count: int, previous: null or URL, next: null or URL, results: [{Mentorship} where mentor=pk and mentor_accepted=true and mentee_accepted=true] }
	auth needed - same user
	added

GET `users/<InnavatorUser>/requests_as_mentor_from_me/`
	{ count: int, previous: null or URL, next: null or URL, results: [{Mentorship} where mentee=pk and mentor_accepted=false and mentee_accepted=true] }
	auth needed - same user
	added

GET `users/<InnavatorUser>/requests_as_mentor_to_me/`
	{ count: int, previous: null or URL, next: null or URL, results: [{Mentorship} where mentor=pk and mentor_accepted=false and mentee_accepted=true] }
	auth needed - same user
	added

GET `users/<InnavatorUser>/requests_as_mentee_from_me/`
	{ count: int, previous: null or URL, next: null or URL, results: [{Mentorship} where mentor=pk and mentor_accepted=true and mentee_accepted=false] }
	auth needed - same user
	added

GET `users/<InnavatorUser>/requests_as_mentee_to_me/`
	{ count: int, previous: null or URL, next: null or URL, results: [{Mentorship} where mentee=pk and mentor_accepted=true and mentee_accepted=false] }
	auth needed - same user
	added

GET `users/<InnavatorUser>/group_requests_from_me/`
	{ count: int, previous: null or URL, next: null or URL, results: [{GroupMembership} where user=pk and user_accepted=true and group_accepted=false] }
	auth needed - same user
	added

GET `users/<InnavatorUser>/group_requests_to_me/`
	{ count: int, previous: null or URL, next: null or URL, results: [{GroupMembership} where user=pk and user_accepted=false and group_accepted=true] }
	auth needed - same user
	added

GET `users/<InnavatorUser>/willingnesses_to_tutor/`
	{ count: int, previous: null or URL, next: null or URL, results: [{WillingnessToTutor} where user=pk] }
	no auth needed
	added

---------------

GET `groups/`
	{ count: int, previous: null or URL, next: null or URL, results: [{snowflake_id: InnavatorGroup, name: string} for InnavatorGroup where members includes user] }
	auth needed - anyone
	added

GET `groups/all/`
	{ count: int, previous: null or URL, next: null or URL, results: [{snowflake_id: InnavatorGroup, name: string}] }
	auth needed - admin
	added

GET `groups/clubs/`
	{ count: int, previous: null or URL, next: null or URL, results: [{snowflake_id: InnavatorGroup, name: string} for InnavatorGroup where is_club=true] }
	no auth needed
	added

GET `groups/<InnavatorGroup>/`
	{ {InnavatorGroup} where pk=pk }
	auth needed - member
	added

GET `groups/<InnavatorGroup>/members/`
	{ count: int, previous: null or URL, next: null or URL, results: [{user: InnavatorUser, is_privileged: boolean} for GroupMembership where group=pk and user_accepted=true and group_accepted=true] }
	auth needed - member
	added

GET `groups/<InnavatorGroup>/requests_from_group/`
	{ count: int, previous: null or URL, next: null or URL, results: [{GroupMembership} where group=pk and user_accepted=false and group_accepted=true] }
	auth needed - is_privileged
	added

GET `groups/<InnavatorGroup>/requests_to_group/`
	{ count: int, previous: null or URL, next: null or URL, results: [{GroupMembership} where group=pk and user_accepted=true and group_accepted=false] }
	auth needed - is_privileged
	added

GET `groups/<InnavatorGroup>/channels/`
	{ count: int, previous: null or URL, next: null or URL, results: [{Channel} where group=pk] }
	auth needed - member
	added

GET `groups/<InnavatorGroup>/projects/`
	{ count: int, previous: null or URL, next: null or URL, results: [{Project} where group=pk] }
	no auth needed if is_club, else auth needed - member
	added

GET `groups/<InnavatorGroup>/events/`
	{ count: int, previous: null or URL, next: null or URL, results: [{Event} where group=pk] }
	no auth needed if is_club, else auth needed - member
	added

---------------

GET `channels/<Channel>/unread_message_count/`
	{ count: int }
	auth needed - group member
	added

---------------

GET `messages/<Message>/`
	{ {Message} where pk=pk }
	auth needed - channel.group member
	added

---------------

GET `roles/`
	{ count: int, previous: null or URL, next: null or URL, results: [{Role}] }
	no auth needed
	added

GET `roles/<Role>/`
	{ {Role} where pk=pk }
	no auth needed
	added

GET `roles/<Role>/get_commission_requests/`
	{ count: int, previous: null or URL, next: null or URL, results: [{CommissionRequest} where role=pk] }
	no auth needed
	added

GET `roles/<Role>/get_projects/`
	{ count: int, previous: null or URL, next: null or URL, results: [{Project} where looking_for_roles contains pk] }
	no auth needed
	added

---------------

GET `projects/`
	{ count: int, previous: null or URL, next: null or URL, results: [{Project}] }
	no auth needed
	added

GET `projects/<Project>/`
	{ {Project} where pk=pk }
	no auth needed
	added

GET `projects/<Project>/members/`
	{ count: int, previous: null or URL, next: null or URL, results: [{ProjectRole} where project=pk and user_accepted=true and project_accepted=true] }
	no auth needed
	added

GET `projects/<Project>/active_members/`
	{ count: int, previous: null or URL, next: null or URL, results: [{ProjectRole} where project=pk and is_active=true] }
	no auth needed
	added

GET `projects/<Project>/requests_from_project/`
	{ count: int, previous: null or URL, next: null or URL, results: [{ProjectRole} where project=pk and user_accepted=false and project_accepted=true] }
	auth needed - group is_privileged
	added

GET `projects/<Project>/requests_to_project/`
	{ count: int, previous: null or URL, next: null or URL, results: [{ProjectRole} where project=pk and user_accepted=true and project_accepted=false] }
	auth needed - group is_privileged
	added

---------------

GET `commissions/`
	{ count: int, previous: null or URL, next: null or URL, results: [{CommissionRequest}] }
	no auth needed
	added

GET `commissions/<CommissionRequest>/`
	{ {CommissionRequest} where pk=pk }
	no auth needed
	added

---------------

GET `events/<Event>/`
	{ {Event} where pk=pk }
	no auth needed if is_club, else auth needed - group member
	added

---------------

GET `portfolio_entries/`
	{ count: int, previous: null or URL, next: null or URL, results: [{PortfolioEntry}] }
	no auth needed
	added

GET `portfolio_entries/<PortfolioEntry>/`
	{ {PortfolioEntry} where pk=pk }
	no auth needed
	added

---------------

GET `subjects/`
	{ count: int, previous: null or URL, next: null or URL, results: [{Subject}] }
	no auth needed
	added

GET `subjects/<Subject>/`
	{ {Subject} where pk=pk }
	no auth needed
	added

GET `subjects/<Subject>/tutors/`
	{ count: int, previous: null or URL, next: null or URL, results: [{WillingnessToTutor} where subject=pk] }
	no auth needed
	added

GET `subjects/<Subject>/projects/`
	{ count: int, previous: null or URL, next: null or URL, results: [{Project} where subjects contains pk] }
	no auth needed
	added

GET `subjects/<Subject>/portfolio_entries/`
	{ count: int, previous: null or URL, next: null or URL, results: [{PortfolioEntry} where subject=pk] }
	no auth needed
	added

=============================

DELETE `users/<InnavatorUser>/remove_mentor/`
	{}
	auth needed - anyone
	added
	removes as a mentor, or rejects request as a mentor

DELETE `users/<InnavatorUser>/remove_mentee/`
	{}
	auth needed - anyone
	added
	removes as a mentee, or rejects request as a mentee

---------------

DELETE `groups/<InnavatorGroup>/`
	{}
	auth needed - group owner
	added

DELETE `groups/<InnavatorGroup>/leave/`
	{}
	auth needed - member
	added
	leaves the group, or rejects an invite

---------------

DELETE `channels/<Channel>/`
	{}
	auth needed - group owner
	added

---------------

DELETE `messages/<Message>/`
	{}
	auth needed - sender or channel.group is_privileged
	added

---------------

DELETE `projects/<Project>/`
	{}
	auth needed - group owner
	added

DELETE `projects/<Project>/leave/`
	{}
	auth needed - member
	added
	leaves the project, or rejects an invite

---------------

DELETE `commissions/<CommissionRequest>/`
	{}
	auth needed - sender
	added

---------------

DELETE `events/<Event>/`
	{}
	auth needed - group is_privileged
	added

---------------

DELETE `portfolio_entries/<PortfolioEntry>/`
	{}
	auth needed - same user
	added

---------------

DELETE `subjects/<Subject>/remove_tutor_willingness/`
	{}
	auth needed - anyone
	added

=============================

POST `jwt_token/` { username: email, password: string }
	{ access: access_token, refresh: refresh_token }
	no auth needed
	added
	logs in: access_token is a short-term token used to authenticate, refresh_token is a long-term token used to refresh access_token

POST `jwt_token/refresh/` { refresh: refresh_token }
	{ access: access_token }
	no auth needed
	added
	retrieves the short-term token without needing to log in again

---------------

POST `users/` { user: { username: string, email: email, password: string }, full_name: string optional if preferred_name present, preferred_name: string optional if full_name present, major: string }
	{}
	no auth needed
	added
	creates a new user

POST `users/<InnavatorUser>/request_as_mentor/` {request_message: string optional}
	{}
	auth needed - anyone
	added
	sends a request to the pk to be a mentor of the sender

POST `users/<InnavatorUser>/request_as_mentee/` {request_message: string optional}
	{}
	auth needed - anyone
	added
	sends a request to the pk to be a mentee of the sender

POST `users/<InnavatorUser>/create_portfolio_entry/` { name: string, description: string optional, picture_url: URL optional, url: URL optional }
	{}
	auth needed - same user
	added

---------------

POST `groups/` { name: string }
	{}
	auth needed - anyone
	added
	creates a new group

POST `groups/<InnavatorGroup>/create_channel/` { name: string }
	{}
	auth needed - is_privileged
	added

POST `groups/<InnavatorGroup>/create_project/` { name: string, description: string optional }
	{}
	auth needed - is_privileged
	added

POST `groups/<InnavatorGroup>/create_event/` { name: string, start_time: timestamp, description: string optional }
	{}
	auth needed - is_privileged
	added

POST `groups/<InnavatorGroup>/invite/` { user: InnavatorUser, request_message: string optional, is_privileged: boolean optional }
	{}
	auth needed - is_privileged
	added

POST `groups/<InnavatorGroup>/request_to_join/` { request_message: string optional }
	{}
	auth needed - anyone
	added

POST `groups/<InnavatorGroup>/remove_user/` { user: InnavatorUser }
	{}
	auth needed - is_privileged
	added
	also rejects request to join

---------------

POST `channels/<Channel>/messages/` {}
	{ count: int, previous: null or URL, next: null or URL, results: [{Message}] }
	auth needed - group member
	added
	retrieves messages; this uses POST because it sets the last read

POST `channels/<Channel>/create_message/` { contents: string }
	{}
	auth needed - group member
	added

---------------

POST `projects/<Project>/invite/` { user: InnavatorUser, role: Role, request_message: string optional }
	{}
	auth needed - group is_privileged
	added

POST `projects/<Project>/request_to_join/` { role: Role, request_message: string optional }
	{}
	auth needed - group is_privileged
	added

POST `projects/<Project>/remove_user/` { user: InnavatorUser }
	{}
	auth needed - group is_privileged
	added
	also rejects request to join

POST `projects/<Project>/alter_role/` { user: InnavatorUser, role: Role }
	{}
	auth needed - group is_privileged
	added

POST `projects/<Project>/add_needed_role/` { role: Role }
	{}
	auth needed - group is_privileged
	added

POST `projects/<Project>/remove_needed_role/` { role: Role }
	{}
	auth needed - group is_privileged
	added

POST `projects/<Project>/add_subject/` { subject: Subject }
	{}
	auth needed - group is_privileged
	added

POST `projects/<Project>/remove_subject/` { subject: Subject }
	{}
	auth needed - group is_privileged
	added

---------------

POST `roles/` { name: string }
	{}
	auth needed - admin
	added
	creates a new role

---------------

POST `commissions/` { role: Role, name: string, description: string optional }
	{}
	auth needed - anyone
	added
	creates a new commission request

---------------

POST `subjects/<Subject>/add_tutor_willingness/` {}
	{}
	auth needed - anyone
	added

=============================

PATCH `users/<InnavatorUser>/` { full_name: string optional if preferred_name present or either existing, preferred_name: string optional if full_name present or either existing, major: string, website_url: URL, profile_picture_url: URL }
	{}
	auth needed - same user
	added

PATCH `users/<InnavatorUser>/patch_palette/` { main_background_gradient_triplet: string, ui_group_background_gradient_triplet: string }
	{}
	auth needed - same user
	added

PATCH `users/<InnavatorUser>/accept_mentor_request/` {}
	{ {Group} }
	auth needed - anyone
	added
	returned group is newly created one joined by mentor and mentee, both of whom are privileged, and the owner is the mentor

PATCH `users/<InnavatorUser>/accept_mentee_request/` {}
	{ {Group} }
	auth needed - anyone
	added
	returned group is newly created one joined by mentor and mentee, both of whom are privileged, and the owner is the mentor

---------------

PATCH `groups/<InnavatorGroup>/` { owner: InnavatorUser, name: string }
	{}
	auth needed - owner
	added

PATCH `groups/<InnavatorGroup>/accept_invite/` {}
	{}
	auth needed - is_privileged
	added

PATCH `groups/<InnavatorGroup>/accept_join_request/` { user: InnavatorUser }
	{}
	auth needed - is_privileged
	added

---------------

PATCH `channels/<Channel>/` { name: string, read_restricted: boolean, write_restricted: boolean }
	{}
	auth needed - group is_privileged
	added

---------------

PATCH `messages/<Message>/` { contents: string }
	{}
	auth needed - sender
	added

---------------

PATCH `projects/<Project>/` { name: string, description: string, is_active: boolean }
	{}
	auth needed - group is_privileged
	added

PATCH `projects/<Project>/accept_invite/` {}
	{}
	auth needed - group is_privileged
	added
	also adds user to group

PATCH `projects/<Project>/accept_join_request/` { user: InnavatorUser }
	{}
	auth needed - group is_privileged
	added
	also adds user to group

---------------

PATCH `commissions/<CommissionRequest>/` { role: Role, name: string, description: string }
	{}
	auth needed - sender
	added

---------------

PATCH `events/<Event>/` { name: string, description: string, start_time: timestamp }
	{}
	auth needed - group is_privileged
	added

---------------

PATCH `portfolio_entries/<PortfolioEntry>/` { name: string, description: string }
	{}
	auth needed - same user
	added
